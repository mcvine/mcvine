// -*- C++ -*-
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//                                   Jiao Lin
//                      California Institute of Technology
//                        (C) 2007  All Rights Reserved
//
// {LicenseText}
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//

#ifndef MCCOMPOSITE_GEOMETRY_INTERSECT_H
#error intersect.icc not meaningful outside intersect.h
#else

#include "locate.h"
#include "journal/debug.h"
#include "mccomposite/geometry/shape2ostream.h"
#include "mccomposite/vector2ostream.h"


namespace mccomposite {
  
  namespace geometry {
    
    template <typename index_t>
    index_t find_shape_containing_point
    ( const Position & point, const std::vector<const AbstractShape *> & shapes ) 
    {
      for (index_t i = 0; i<shapes.size(); i++) 
	if (geometry::locate(point, *(shapes[i]) ) == Locator::inside )
	  return i;
      return -1;
    }


    template <typename index_t>
    index_t find_1st_hit
    ( const Position & start, const Direction & direction, 
      const std::vector<const AbstractShape *> & shapes )  
    {
#ifdef DEBUG
      journal::debug_t debug("mccomposite.geometry.intersect");
#endif
      Arrow arrow(start, direction);
      Union all(shapes);
      index_t ret;

      // We need to determine intersections anyway
      ArrowIntersector::distances_t distances = 
	forward_intersect( arrow, all );
#ifdef DEBUG
      debug << journal::at(__HERE__)
	    << "forward intersections: " << distances
	    << journal::endl;
#endif
      // number of intersections
      size_t nIntersections = distances.size();

      //we have two cases
      // case 1
      //   shape1     |  vacuum | shape2
      //        start-|---------|---> 
      // case 2
      //   vacuum     |  shape1
      //        start-|-----------> 
      // case 1: there will be odd number of intersections
      // case 2: there will be even number of intersections

      // we just need to
      // determine which one of the above two cases is true,
      // case1:
      if (nIntersections % 2 == 1) {
#ifdef DEBUG
      debug << journal::at(__HERE__)
	    << "case1"
	    << journal::newline;
#endif
	Position middle_of_start_and_intersection1 = 
	  start + (distances[0]/2.)*direction;
	ret = find_shape_containing_point<index_t>
	  (middle_of_start_and_intersection1, shapes);
      }
      // case2:
      else {
#ifdef DEBUG
      debug << journal::at(__HERE__)
	    << "case2"
	    << journal::newline;
#endif
	// no intersection
	if (nIntersections==0) return -1;
	// at least two
	Position middle_of_intersection1_and_intersection2 = 
	  start + (distances[0]+distances[1])/2.*direction;
	ret = find_shape_containing_point<index_t>
	  (middle_of_intersection1_and_intersection2, shapes);
      }

#ifdef DEBUG
      debug << journal::at(__HERE__)
	    << "preliminary result of shape index : " << ret
	    << journal::endl;
#endif

      // let us determine if the start is on border
      bool isonborder = 0;
      for (size_t shape_index=0; shape_index<shapes.size(); shape_index++) {
	const AbstractShape & shape = *(shapes[shape_index]);
	if (geometry::locate(start, shape) == Locator::onborder ) 
	  { isonborder = 1; break; }
      }
      
#ifdef DEBUG
      debug << journal::at(__HERE__)
	    << "is the starting point " << start 
	    << " on border of any shape? " << isonborder
	    << journal::endl;
#endif

      // If start is not on border of any shape, it would be easier.
      if (!isonborder) return ret;

      // on border. that is a bit more difficult.
      // we need to go over all intersection pairs, and find the first pair
      // whose midlle point is insde a shape. That shape containing
      // the middle point is the target.
      double previous = 0.0, now;
      for (size_t point_index = 0; point_index < nIntersections; point_index++) {
	now = distances[point_index];
	Position middle_point = start + (previous + now)/2*direction;
	ret = find_shape_containing_point<index_t>( middle_point, shapes );
#ifdef DEBUG
  debug << journal::at(__HERE__)
        << "point_index " << point_index
        << ", now " << now
        << ", middle_point" << middle_point
        << ", ret" << ret
        << journal::endl;
#endif
	// if (ret>=0 && ret<nIntersections) return ret;
	if (ret>=0) return ret;
	previous = now;
      }
      return -1;
    }
    
  }
  
}

#endif

// version
// $Id$

// End of file 

