/*******************************************************************************
*
* McStas, the neutron ray-tracing package
*         Maintained by Kristian Nielsen and Kim Lefmann,
*         Copyright 1997-2000 Risoe National Laboratory, Roskilde, Denmark
*
* Component: SNS_source_r1
*
* %I
* Written by: G. Granroth
* Date: March 2004
* Revised by: J. Lin
* Origin: SNS Project Oak Ridge National Laboratory
*
* A source that produces a time and energy distribution from the SNS moderator files.
*
* %D
* Produces a time-of-flight spectrum from SNS moderator files
* moderator files can be obtained from the <A href="http://www.sns.gov/users/instrument_systems/components/moderator/">SNS website </A>.
* The output units of this component are N/pulse
* Notes:
* (1) the raw moderator files are per Sr.  The focusing parameters provide the solid
* angle accepted by the guide to remove the Sr dependence from the output. Therefore 
* the best practice is to set xw and yh to the width and height of the next beam 
* component, respectively. The dist parameter should then be set as the distance 
* from the moderator to the first component.
* (2) This component works purely by interpolation. Therefore be sure that Emin and 
* Emax are within the limits of the moderator file
*  
*
* %P
* Input parameters:
* S_filename:   Filename of source data 
* width:  (m)   width of moderator
* height: (m)   height of moderator
* dist:   (m)   Distance from source to the focusing rectangle
* xw:     (m)   Width of focusing rectangle
* yh:     (m)   Height of focusing rectangle
* Emin: (meV)   minimum energy of neutron to generate
* Emax: (meV)   maximum energy of neutron to generate
* angling: (deg) rotation angle of moderator. Ref. pg 300, Windsor. Positive means the moderator is rotated counter-clockwise looking from above
* %E
*******************************************************************************/

DEFINE COMPONENT SNS_source_r1
DEFINITION PARAMETERS ()
SETTING PARAMETERS (char *S_filename="SNS_moderator_data_file",width=0.1,
	height=0.12, dist=2.5, xw=0.1, yh=0.12, Emin=50, Emax=70, angling=0.0)
OUTPUT PARAMETERS (hdiv,vdiv,p_in)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)

SHARE
%{
// ----------- added by Jiao Lin --------
// ----------  header for SHARE ----------
// ----------- added by Jiao Lin --------
%include "sns_source-lib"

// ----------- added by Jiao Lin --------
// ----------  implementation for SHARE ----------
// ----------- added by Jiao Lin --------

%}

DECLARE
%{
  //double xonly(double);
  //double Pfunc(double,double);
  //double txonly(double);
  //double tPfunc(double,double);
  double hdiv,vdiv;
  double p_in;
  double *inxvec,*inyvec,*Pvec;
  int xylength;
  double *tcol, *Ecol;
  double *txval, *tyval;
  double *tPvec;
  double EPmax, EPmin,INorm,INorm2;
  int ntvals,idxstart,idxstop,tidxstart,tidxstop,nEvals;
  double **Ptmat;


%}
INITIALIZE
%{  
  using namespace mcstas2::SNSsource;
  FILE *fp;
  double llim, hlim,ltlim,htlim,junk;  
  double tycol[200];
  double **Imat;
  int idx1,idx2;
  Pvec=(double *)malloc(500*sizeof(double));
  inxvec=(double *)malloc(500*sizeof(double));
  inyvec=(double *)malloc(500*sizeof(double));
  tcol=(double *)malloc(200*sizeof(double));
  Ecol=(double *)malloc(200*sizeof(double));
  tyval=(double *)malloc(500*sizeof(double));
  txval=(double *)malloc(500*sizeof(double));
  tPvec=(double *)malloc(500*sizeof(double));
  Ptmat=(double **)malloc(200*sizeof(double *));
  for(idx1=0;idx1<200;idx1++){
    Ptmat[idx1]=(double *)malloc(200*sizeof(double));
  } 
  Imat=(double **)malloc(200*sizeof(double*));
  for(idx1=0;idx1<200;idx1++){
    Imat[idx1]=(double *)malloc(500*sizeof(double));
  }
  ltlim=0.1;
  htlim=1.8e3;
 /* read file */
  printf("%s%s\n","Loading moderator file ",S_filename);
   sns_source_load(S_filename,inxvec,inyvec,0,2,&xylength,tcol,Ecol,Imat,&ntvals,&nEvals);
 /* calculate probabilty distribution function points for use in interpolation routine */

 llim=inxvec[1];hlim=inxvec[xylength];
 printf("Start calculating probability distribution\n");
 /* calculate total number of neutrons in specified energy window */
 // functor "xonly"
 Xonly xonly( xylength, inxvec, inyvec );
 Txonly txonly( ntvals, txval, tyval );

 INorm2=integ1(xonly,Emin/1000.0,Emax/1000.0,0.001);
  Pcalc(xonly,llim,hlim,inxvec,Pvec,xylength,&idxstart,&idxstop);
  /*calculate probability distribution as a function of t for each energy value */
  tyval[0]=Imat[0][0];  
  printf("%g \n",tyval[0]); 
  printf("nEvals = %d, ntvals = %d\n",nEvals, ntvals);
  for(idx1=0;idx1<nEvals;idx1++){
      for(idx2=0;idx2<ntvals;idx2++){
        //printf("idx2 %d idx1 %d tyval: %g\n",idx2,idx1,Imat[idx2][idx1]);
        tyval[idx2]=Imat[idx2][idx1];
        txval[idx2]=tcol[idx2];        
      }
      tPcalc(txonly,ltlim,htlim,tcol,tPvec,ntvals,&tidxstart,&tidxstop);
      for(idx2=0;idx2<ntvals;idx2++){
        Ptmat[idx2][idx1]=tPvec[idx2];
      }   
   }
  /* Generate min and max Prob values corresponding to specified energy window*/ 
    /* use quadratic interpolation  */
   EPmax=quadfuncint(Emax/1000.0,xylength,inxvec,Pvec);
   EPmin=quadfuncint(Emin/1000.0,xylength,inxvec,Pvec);
  /* Calculate solid Angle */
  p_in = xw*yh/(dist*dist);
  for(idx1=0;idx1<200;idx1++){
    free(Imat[idx1]);
  }
  free(Imat);
printf("Finished calculating probability distribution\n");

%}
TRACE
%{    
  using namespace mcstas2::SNSsource;
 Pfunc pfunc( xylength, inxvec, Pvec );
 TPfunc tpfunc( ntvals, txval, tyval );

  double theta,phi,v,tauv,E,Eval,tval,randp;
  double hdivmin,hdivmax,vdivmin,vdivmax;
  int idx1,idx3,Eidxl,Eidxh;
  p=p_in;
  z=0;
 

  x = (rand01()-0.5)*width; /* choose points uniformly distributed on the source */
  y = (rand01()-0.5)*height;

 hdivmax=atan((xw/2.0-x)/dist);
 hdivmin=atan(-(xw/2.0+x)/dist);
 vdivmax=atan((yh/2.0-y)/dist);
 vdivmin=atan(-(yh/2.0+y)/dist);

  theta = hdivmin + (hdivmax-hdivmin)*rand01(); /* Small angle approx. */ 
  phi = vdivmin + (vdivmax-vdivmin)*rand01();
  hdiv=theta;
  vdiv=phi;
  /* generate random numbers*/

   /*First generate E random value */
    randp=EPmin+rand01()*(EPmax-EPmin);
    /* find E value corresponding to random probability */
    Eval=zero_find(pfunc,randp,inxvec[idxstart],inxvec[idxstop],1e-5);
   /* from a known E value generate an emission time value */
   /* find the index of the E values that bracket the random E value */
   idx1=0;
   while((idx1<nEvals)&&(Ecol[idx1]<Eval)){
     idx1++;     
   }
   Eidxh=idx1;
   Eidxl=idx1-1;
   /*calculate the interpolated t, P curve to determine t value from uniform random value*/
   for (idx3=0;idx3<ntvals;idx3++){
     tyval[idx3]=linint(Eval,Ecol[Eidxl],Ecol[Eidxh],Ptmat[idx3][Eidxl],Ptmat[idx3][Eidxh]);
     txval[idx3]=tcol[idx3];
   }
   randp=tyval[tidxstart]+rand01()*(tyval[tidxstop-1]-tyval[tidxstart]);
   if (randp>0.0){
      tval=zero_find(tpfunc,randp,txval[tidxstart],txval[tidxstop-1],1e-5);}
    else{
       tval=0;}
  E = Eval*1000.0;  /* Convert Energy from Ev to meV */
  t = tval*1e-6;      /* Convert time from mus to S */
  v = SE2V*sqrt(E);
  /* Calculate components of velocity vector such that the neutron is within the focusing rectangle */
  vz = v*cos(phi)*cos(theta);   /* Small angle approx. */
  vy = v*sin(phi);
  vx = v*cos(phi)*sin(theta);
  /* rotation due to angling.
  postive angling means ccw rotation of moderator looking from above.
  it means we need to rotate the neutrons cw
  only x and z changes
  */
  double angling_in_radian = angling * PI / 180.;
  {
    double vx1 = vx * cos(angling_in_radian) - vz * sin(angling_in_radian);
    double vz1 = vx * sin(angling_in_radian) + vz * cos(angling_in_radian);
    vz = vz1; vx = vx1;
  }
  p*=INorm2/mcget_ncount();
%}
FINALLY
%{
  int idxf;
  free(txval);free(tyval);free(tPvec);
  free(inxvec);free(inyvec);free(Pvec);free(tcol);free(Ecol);
  for(idxf=0;idxf<200;idxf++){
    free(Ptmat[idxf]);
  } 
  free(Ptmat); 
  
%}

MCDISPLAY
%{
  double x1,y1,x2,y2;
  x1=-width/2.0;y1=-height/2.0;x2=width/2.0;y2=height/2.0;
  multiline(4,(double)x1,(double)y1,0.0,(double)x1,(double)y2,0.0,(double)x2,(double)y2,0.0,(double)x2,(double)y1,0.0,(double)x1,(double)y1,0.0);
%}

END
