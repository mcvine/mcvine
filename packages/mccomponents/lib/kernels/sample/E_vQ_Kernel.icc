// -*- C++ -*-
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//                                   Jiao Lin
//                      California Institute of Technology
//                      (C) 2006-2013  All Rights Reserved
//
// {LicenseText}
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//



#ifndef MCCOMPONENTS_KERNELS_E_VQ_KERNEL_H
#error E_VQ_Kernel.icc not meaningful outside E_VQ_Kernel.h
#endif

#include <cmath>
#include "mccomponents/exception.h"
#include "mcni/math/number.h"
#include "mccomponents/math/random.h"
#include "mccomponents/math/random/geometry.h"
#include "mccomponents/math/Functor.h"
#include "mccomponents/math/rootfinding.h"



namespace mccomponents{
  namespace kernels{
    const double ksq2e = mcni::neutron_units_conversion::k2v*mcni::neutron_units_conversion::k2v*mcni::neutron_units_conversion::vsq2e;
  }
}

template< typename E_vQ_functor_t, typename S_vQ_functor_t>
struct 
mccomponents::kernels::E_vQ_Kernel<E_vQ_functor_t, S_vQ_functor_t>\
:: Details {

  typedef mccomponents::kernels::E_vQ_Kernel<E_vQ_functor_t, S_vQ_functor_t> \
    kernel_t;
    
  
  Details(kernel_t &i_kernel) 
    :
    kernel(&i_kernel)
    ,root_finder(1e-3)
    ,roots_finder(root_finder, 1000)
    {}

  kernel_t * kernel;
  math::Algorithms::Bracketing::Ridder::ZRidd root_finder;
  math::FindRootsEvenly roots_finder;
};


template< typename E_vQ_functor_t>
struct E_vq_minus_deltaE: public mccomponents::math::Functor {
    
  typedef double float_t;
  typedef mcni::Vector3<float_t> v3_t;
    
  // i_E_vQ: E(vector Q)
  // i_ukf: unit vector for kf
  // i_vki: ki vector
  E_vq_minus_deltaE
  (E_vQ_functor_t &i_E_vQ, const v3_t &i_ukf, 
   float_t i_Ei, const v3_t &i_vki)
    :
    Ei(i_Ei)
    ,vki(i_vki)
    ,ukf(i_ukf)
    ,E_vQ(i_E_vQ)
  {
  }
    
  float_t evaluate(float_t kf) const {
    // kf vector
    v3_t vkf = ukf * kf;
    // Q vector
    v3_t vQ = vki - vkf;
    // Ef
    float_t Ef = mcni::neutron_units_conversion::k2E(kf);
    // energy of exciton
    float_t E = E_vQ(vQ.x, vQ.y, vQ.z);
    // should be the same as the energy difference
    // of incident and scattered neutron
    return Ei - Ef - E;
  }
  
  float_t Ei;
  v3_t vki, ukf;
  E_vQ_functor_t &E_vQ;  
};


template< typename E_vQ_functor_t, typename S_vQ_functor_t>
mccomponents::kernels::E_vQ_Kernel<E_vQ_functor_t, S_vQ_functor_t>\
::E_vQ_Kernel
(const E_vQ_functor_t & E_vQ, 
 const S_vQ_functor_t & S_vQ,
 double Emax,
 double absorption_coefficient,
 double scattering_coefficient)
  : m_E(E_vQ),
    m_S(S_vQ),
    m_Emax(Emax),
    m_absorption_coefficient( absorption_coefficient ),
    m_scattering_coefficient( scattering_coefficient ),
    m_details( new Details(*this) )
{
}


template< typename E_vQ_functor_t, typename S_vQ_functor_t>
double
mccomponents::kernels::E_vQ_Kernel<E_vQ_functor_t, S_vQ_functor_t>\
::absorption_coefficient(const mcni::Neutron::Event & ev )
{
  float_t v = ev.state.velocity.length();
  return m_absorption_coefficient * (2200/v);
}


template< typename E_vQ_functor_t, typename S_vQ_functor_t>
double
mccomponents::kernels::E_vQ_Kernel<E_vQ_functor_t, S_vQ_functor_t>\
::scattering_coefficient(const mcni::Neutron::Event & ev )
{

  // this is a simplified model
  return m_scattering_coefficient;
}


template< typename E_vQ_functor_t, typename S_vQ_functor_t>
void
mccomponents::kernels::E_vQ_Kernel<E_vQ_functor_t, S_vQ_functor_t>\
::absorb
( mcni::Neutron::Event & ev )
{
}


template< typename E_vQ_functor_t, typename S_vQ_functor_t>
void
mccomponents::kernels::E_vQ_Kernel<E_vQ_functor_t, S_vQ_functor_t>\
::S
( mcni::Neutron::Event & ev )
{
  namespace conversion = mcni::neutron_units_conversion;
  typedef mcni::Vector3<double> V3d;

  // input neutron state
  mcni::Neutron::State & state = ev.state;
  // incident neutron velocity
  V3d vvi = state.velocity;
  double vi = vvi.length();
  // ki vector
  V3d vki = conversion::v2k * vvi;
  double ki = vki.length();
  
  // incident neutron energy
  double Ei = conversion::v2E( vi );
  
  // randomly pick scattering direction
  V3d ukf; math::choose_direction(ukf);
  
  // find kf
#ifdef DEBUG
  std::cout << "kf unit vector: " << ukf
	    << ", Ei: " << Ei
	    << ", vki: " << vki
	    << std::endl;
#endif
  // .. construct functor to find solution
  E_vq_minus_deltaE<E_vQ_functor_t> eqmd
    (m_E, ukf, Ei, vki);
  // .. min/max kf
  double min_kf = conversion::E2k(std::max(0., Ei-m_Emax));
  double max_kf = conversion::E2k(Ei);
  // .. solve 
  std::vector<double> kf_list = m_details->roots_finder.solve\
    (min_kf, max_kf, eqmd);
  // .. randomly choose kf
  size_t nkf = kf_list.size();
  if (nkf<1) {
    std::cerr
      << "E_vQ_Kernel::scatter: failed to find solution for kf. skip."
      << "Ei=" << Ei
      << std::endl;
    return;
  }
  /*
    std::cout << "nkf=" << nkf << ": ";
    for (int i = 0; i<nkf; i++)
    std::cout << kf_list[i] << ", ";
    std::cout << std::endl;
  */
  size_t index=0;
  if (nkf>1) index = math::random(size_t(0), nkf);
  double kf = kf_list[index];
  
  ev.probability *= nkf;
  // compute differential
  double dkf = ki/200, df_dkf;
  df_dkf = std::abs(-eqmd.evaluate(kf+2*dkf)+8*eqmd.evaluate(kf+dkf)-8*eqmd.evaluate(kf-dkf)+eqmd.evaluate(kf-2*dkf))/12/dkf;
  ev.probability *= 2 * ksq2e * kf / df_dkf;
  
  // kf vector
  V3d vkf = ukf * kf;
  // Q vector
  V3d vQ = vki - vkf;
  
  double Ef = conversion::k2E(kf);
  double E = Ei - Ef;
#ifdef DEBUG
  std::cout << "E,Q=" << E << ", " << vQ << std::endl;
#endif
  // check if the energy transfer matches what the dispersion dictates
  // and bail out if it does not.
  // without this, the simulated spectrum will show a trace
  // connecting discontinued dispersion surfaces
  if (std::abs(E-m_E(vQ.x, vQ.y, vQ.z)) > m_Emax * 1e-5) return;
  
  // final velocity vector
  V3d vvf = conversion::k2v * vkf;
  state.velocity = vvf;
  
  // 
  double S = m_S(vQ.x, vQ.y, vQ.z);
  double kf_over_ki = kf/vki.length();
#ifdef DEBUG
  std::cout << "S,vf/vi=" << S << ", " << kf_over_ki << std::endl;
#endif
  // adjust probability of neutron event
  ev.probability *= S * kf_over_ki;
}


// version
// $Id$

// End of file 
