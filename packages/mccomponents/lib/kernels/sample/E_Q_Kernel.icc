// -*- C++ -*-
//
// Jiao Lin <jiao.lin@gmail.com>
//

/*
  Implementations details: https://github.com/mcvine/training/blob/7d985bec0b424592236cf6c62ea99173607cc4b6/dev/kernels/E_Q%20kernel.ipynb
 */


#ifndef MCCOMPONENTS_KERNELS_E_Q_KERNEL_H
#error E_Q_Kernel.icc not meaningful outside E_Q_Kernel.h
#endif

#include <cmath>
#include "mccomponents/exception.h"
#include "mcni/math/number.h"
#include "mccomponents/math/random.h"


// debug
// #define DEBUG


template< typename E_Q_functor_t, typename S_Q_functor_t>
struct
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
:: Details {

#ifdef DEBUG
  const static char jrnltag[];
#endif

  const static double m_epsilon;
};


#ifdef DEBUG
template< typename E_Q_functor_t, typename S_Q_functor_t>
const char
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::Details::jrnltag[] = "E_Q_Kernel";
#endif


template< typename E_Q_functor_t, typename S_Q_functor_t>
const double mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t> \
::Details::m_epsilon = 1e-4;


template< typename E_Q_functor_t, typename S_Q_functor_t>
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::E_Q_Kernel
(const E_Q_functor_t & E_Q, 
 const S_Q_functor_t & S_Q,
 double Qmin, double Qmax,
 double absorption_coefficient,
 double scattering_coefficient)
  : m_E(E_Q),
    m_S(S_Q),
    m_Qmin(Qmin),
    m_Qmax(Qmax),
    m_absorption_coefficient( absorption_coefficient ),
    m_scattering_coefficient( scattering_coefficient ),
    m_details( new Details )
{
  if (m_Qmin<0) {
    std::cerr << "Qmin must be not negative. Got " << m_Qmin << std::endl;
    throw;
  }
  if (m_Qmin >= m_Qmax) {
    std::cerr << "Qmin (" << m_Qmin 
	      << ") must be smaller than Qmax ("
	      << m_Qmax << ")." << std::endl;
    throw;
  }
}


template< typename E_Q_functor_t, typename S_Q_functor_t>
double
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::absorption_coefficient(const mcni::Neutron::Event & ev )
{
  float_t v = ev.state.velocity.length();
  return m_absorption_coefficient * (2200/v);
}


template< typename E_Q_functor_t, typename S_Q_functor_t>
double
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::scattering_coefficient(const mcni::Neutron::Event & ev )
{

  // this is a simplified model
  return m_scattering_coefficient;
}


template< typename E_Q_functor_t, typename S_Q_functor_t>
void
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::absorb
( mcni::Neutron::Event & ev )
{
}


template< typename E_Q_functor_t, typename S_Q_functor_t>
void
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::S
( mcni::Neutron::Event & ev )
{
  /*
    the implemenation here is mostly good, but need more careful
    treatment regarding invalid Q values in the given Q range
   */
  namespace conversion = mcni::neutron_units_conversion;

  // input neutron state
  mcni::Neutron::State & state = ev.state;
  // incident neutron velocity
  double vi = state.velocity.length();
  // incident neutron energy
  double Ei = conversion::v2E( vi );
  double Q, E, Ef, vf, ki, kf, cost, cost2;
  int counter=0;
  while (counter++ < 100) {
    // randomly pick momentum transfer
    Q = math::random(m_Qmin, m_Qmax);
    // compute E from Q
    E = m_E(Q);

#ifdef DEBUG
    std::cout << "E,Q=" << E << ", " << Q << std::endl;
#endif
    // final energy
    Ef = Ei-E;

    if (Ef<0) {
#ifdef DEBUG
      std::cerr << "E,Q,Ei,Ef="
                << E  << ", "
                << Q  << ", "
                << Ei << ", "
                << Ef << ", "
                << std::endl;
#endif
      continue;
    }

    // final velocity magnitude
    vf = conversion::E2v( Ef );
    // theta, phi
    ki = conversion::v2k* vi;
    kf = conversion::v2k* vf;
    cost = (ki*ki+kf*kf-Q*Q)/(2*ki*kf);
    cost2 = cost*cost;
    if (cost2>1) {
      // Ei is too small and we have a problem
#ifdef DEBUG
      std::cerr << "ki, kf, Q, cos(theta)="
                << ki  << ", "
                << kf  << ", "
                << Q  << ", "
                << cost << ", "
                << std::endl;
#endif
      continue;
    }
    break;
  }
  if (counter > 100) {
    ev.probability = 0;
    return;
  }
  double sint = std::sqrt(1-cost2);
  //
  double phi = math::random(0., mcni::PI*2);
  // scattered neutron velocity vector
  // == coordinate system ==
  typedef mcni::Vector3<double> V3d;
  V3d e1 = state.velocity; e1.normalize();
  // if e1 is not in z-direction
  // we set e2 to be the cross product of e1 and (0,0,1)
  // if e1 is right on the z-direction, that means e1 = (0,0,1)
  // and we set e2 = (1,0,0) or whatever
  V3d e2;
  if (std::abs(e1.x)>m_details->m_epsilon || std::abs(e1.y)>m_details->m_epsilon) {
    e2 = V3d(0,0,1) * e1; e2.normalize();
  } else {
    e2 = V3d(1,0,0);
  }
  V3d e3 = e1 * e2;
  // == v_f ==
  V3d v_f = sint*cos(phi) * e2
    + sint*sin(phi) * e3
    + cost * e1;
  v_f = v_f * vf;

#ifdef DEBUG
  std::cout << "S,vf/vi=" << m_S(Q) << ", " << vf/vi << std::endl;
#endif
  // adjust probability of neutron event
  ev.probability *= m_S(Q) * (vf/vi);
  ev.probability *=  Q*(m_Qmax-m_Qmin) /counter / (kf*ki) / 2; // * jacobian;
  //
  state.velocity = v_f;
}


// version
// End of file
