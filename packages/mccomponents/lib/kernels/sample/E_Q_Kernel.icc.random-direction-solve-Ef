// -*- C++ -*-
//
// Jiao Lin <jiao.lin@gmail.com>
//


/*
Implementation documentation: https://github.com/mcvine/training/blob/7d985bec0b424592236cf6c62ea99173607cc4b6/dev/kernels/E_Q%20kernel%20-%20pick%20scattering%20direction%20first.ipynb
 */


#ifndef MCCOMPONENTS_KERNELS_E_Q_KERNEL_H
#error E_Q_Kernel.icc not meaningful outside E_Q_Kernel.h
#endif

#include <cmath>
#include <algorithm>
#include "mccomponents/exception.h"
#include "mcni/math/number.h"
#include "mccomponents/math/random.h"
#include "mccomponents/math/random/geometry.h"
#include "E_Q_Kernel_helpers.h"
#include "mccomponents/math/rootfinding.h"





template< typename E_Q_functor_t, typename S_Q_functor_t>
struct 
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
:: Details {

  typedef mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t> \
    kernel_t;
    
  Details(kernel_t &i_kernel) 
    :
    kernel(&i_kernel)
    ,root_finder(1e-2)
    ,roots_finder(root_finder, num_sections())
    {}

  kernel_t * kernel;
  math::Algorithms::Bracketing::Ridder::ZRidd root_finder;
  math::FindRootsEvenly roots_finder;
  int num_sections() {
    // compute Emin and Emax
    // this assumes that the E(Q) curve is smooth and does not have spikes
    const size_t N = 1000; // # of data points
    double E[N], dQ = (kernel->m_Qmax-kernel->m_Qmin)/N;
    for (size_t i=0; i<N; i++) {
      double Q = kernel->m_Qmin + dQ * i;
      E[i] = kernel->m_E(Q);
    }
    std::sort(E, E+N);
    kernel->m_Emin = E[0]; kernel->m_Emax = E[N-1];
    // estimate Ei
    namespace conversion = mcni::neutron_units_conversion;
    double Ei_estimate = conversion::k2E(kernel->m_Qmax/2);
    // step size for Ef
    double Ef_step = Ei_estimate/10000.;
    // make sure Emin and Emax is not exactly the same
    kernel->m_Emax = std::max(kernel->m_Emax, kernel->m_Emin+Ef_step);
    return (kernel->m_Emax-kernel->m_Emin)/Ef_step + 1;
  }
};


#ifdef DEBUG
template< typename E_Q_functor_t, typename S_Q_functor_t>
const char 
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::Details::jrnltag[] = "E_Q_Kernel";
#endif


template< typename E_Q_functor_t, typename S_Q_functor_t>
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::E_Q_Kernel
(const E_Q_functor_t & E_Q, 
 const S_Q_functor_t & S_Q,
 double Qmin, double Qmax,
 double absorption_coefficient,
 double scattering_coefficient)
  : m_E(E_Q),
    m_S(S_Q),
    m_Qmin(Qmin),
    m_Qmax(Qmax),
    m_absorption_coefficient( absorption_coefficient ),
    m_scattering_coefficient( scattering_coefficient ),
    m_details( new Details(*this) ) // !!!has to be the last one!!!
{
  if (m_Qmin<0) {
    std::cerr << "Qmin must be not negative. Got " << m_Qmin << std::endl;
    throw;
  }
  if (m_Qmin >= m_Qmax) {
    std::cerr << "Qmin (" << m_Qmin 
	      << ") must be smaller than Qmax ("
	      << m_Qmax << ")." << std::endl;
    throw;
  }
}


template< typename E_Q_functor_t, typename S_Q_functor_t>
double
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::absorption_coefficient(const mcni::Neutron::Event & ev )
{
  float_t v = ev.state.velocity.length();
  return m_absorption_coefficient * (2200/v);
}


template< typename E_Q_functor_t, typename S_Q_functor_t>
double
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::scattering_coefficient(const mcni::Neutron::Event & ev )
{

  // this is a simplified model
  return m_scattering_coefficient;
}


template< typename E_Q_functor_t, typename S_Q_functor_t>
void
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::absorb
( mcni::Neutron::Event & ev )
{
}


template< typename E_Q_functor_t, typename S_Q_functor_t>
void
mccomponents::kernels::E_Q_Kernel<E_Q_functor_t, S_Q_functor_t>\
::S
( mcni::Neutron::Event & ev )
{
  namespace conversion = mcni::neutron_units_conversion;

  // input neutron state
  mcni::Neutron::State & state = ev.state;
  // incident neutron velocity
  double vi = state.velocity.length();
  // incident neutron energy
  double Ei = conversion::v2E( vi );
  // if Ei is too small, no scattering
  if (Ei < m_Emin) return;
  typedef mcni::Vector3<double> V3d;
  // unit vector along incident velocity
  V3d ei = state.velocity; ei.normalize();
  // ki length
  double ki = conversion::v2k * vi;
  
  // find Ef
  size_t nEf = 0, count = 0, index=-1;
  double Ef, cos_t; V3d dir;
  double Ef_min = std::max(0., Ei-m_Emax), Ef_max = Ei-m_Emin;
  while (!nEf && count++<100) {
    // randomly choose a scattering direction
    math::choose_direction( dir );
    // compute cos(theta)
    cos_t = (ei|dir);
    // construct functor f(E_f) to find solution
    E_q_minus_deltaE<E_Q_functor_t> eqmd(m_E, cos_t, Ei);
    // solve 
    std::vector<double> _Ef_list = m_details->roots_finder.solve( Ef_min, Ef_max, eqmd);
    // hack: the current solver may give fake roots. here we gather the "real" roots
    size_t _nEf = _Ef_list.size(); nEf=0;
    double Ef_list[_nEf];
    for (int i=0; i<_nEf; i++) {
      if (std::abs(eqmd.evaluate(_Ef_list[i])) < 1e-2) {
	Ef_list[nEf++] = _Ef_list[i];
      }
    }
    // .. randomly choose Ef
    if (nEf>1) index = math::random(size_t(0), nEf);
    else if (nEf==1) index = 0;
    if (nEf) {
      // solution found. save things needed later
      Ef = Ef_list[index];
#ifdef DEBUG
      std::cout << "nEf: " << nEf << ", residual: " << eqmd.evaluate(Ef) << std::endl;
#endif
    }
  }
  // if cannot find solution in several iterations
  if (nEf<1) {
    std::cerr
      << "E_Q_Kernel::scatter: failed to find solution for Ef. skip."
      << "Ei=" << Ei
      << std::endl;
    return;
  }
  if (Ef<0) {
    // should not proceed. non-physical
    return;
  }
  
#ifdef DEBUG
  double E = Ei-Ef;
  std::cout << "Ei, Ef, E=" << Ei << ", " << Ef << ", " << E << std::endl;
#endif

  // final velocity magnitude
  double vf = conversion::E2v( Ef );

  // Q
  double kf = conversion::v2k * vf;
  double Q = std::sqrt(ki*ki+kf*kf-2*ki*kf*cos_t);
  
  // final velocity vector
  V3d vfv = dir * vf;
  state.velocity = vfv;

#ifdef DEBUG
  std::cout << "S,vf/vi=" << m_S(Q) << ", " << vf/vi << std::endl;
#endif
  // adjust probability of neutron event
  ev.probability *= m_S(Q) * (vf/vi) * nEf;
}


// End of file 
