#!/usr/bin/env python


"""
compute Debye Waller "core" from phonon density of states

Debye Waller factor is written as 

 exp(-2W)

where

 2W ~ 1/3 * u**2 * Q**2

and 

 u**2

can be computed from phonon DOS

This script computes

 1/3 * u**2

from phonon DOS, and it is termed as Debye Waller factor "core" in MCViNE.

This is useful for simulating incoherent elastic scattering.

The computed core has the units of AA**2.

Inputs are:
* DOS
* mass: relative atomic mass
* temperature: unit K
* nsampling: 


The input phonon DOS is in 2-col ascii format.

* x: phonon frequency in TeraHertz or meV
* y: DOS

"""

from __future__ import print_function
import numpy as np
import histogram


def loadDOS_from2colascii(f, xaxis=None):
    from mcni.utils.constants import hbar, e
    from math import pi
    # constant to convert frequency on terahertz to energy in meV
    toenergy = hbar * 1e12 * 2*pi / e * 1e3
    
    lines = open(f).readlines()
    es, Is = [], []
    for line  in lines:
        if line.startswith('#'): continue
        line = line.strip()
        e, I = line.split()
        es.append(float(e))
        Is.append(float(I))
        continue
    e = np.array(es)
    Z = np.array(Is)
    if xaxis == 'TeraHz':
        e *= toenergy
    elif xaxis == 'meV':
        pass
    else:
        raise NotImplementedError
    return e, Z


def loadDOS_fromidf(path, **kwds):
    from mccomponents.sample.idf import readDOS
    e, Z = readDOS(path)
    return e, Z


def loadDOS_fromh5(path, **kwds):
    import histogram.hdf as hh
    h = hh.load(path)
    return h.axes()[0].binCenters(), h.I


def loadDOS(path, **kwds):
    import os, warnings
    ext = os.path.splitext(path)[-1]
    if os.path.basename(path) == 'DOS':
        warnings.warn('DOS file %s assumed to be in idf format' % path)
        format = 'idf'
    elif ext == '.idf':
        format = 'idf'
    elif ext == '.dat':
        format = '2colascii'
    elif ext == '.h5':
        format = 'h5'
    else:
        raise NotImplementedError("unknown file format: %s" % path)
    
    handler = eval('loadDOS_from%s' % format)
    e,Z = handler(path, **kwds)
    dE = e[1] - e[0]
    Z /= Z.sum() * dE
    h = histogram.histogram(
        'dos', 
        [('energy', e, 'meV')],
        Z)
    # histogram.plot(h)
    return h


def compute(dos, mass, temperature, nsampling):
    from mccomponents.sample.phonon.bindings.BoostPythonBinding  import New
    b = New()
    bpdos = b.dos_fromhistogram(dos)
    bpdw = b.dwfromDOS(bpdos, mass, temperature, nsampling)
    return bpdw.core()


def compute2(dos, mass, temperature):
    from mccomponents.sample.phonon.multiphonon import gamma0, DWExp
    E = dos.energy
    Z = dos.I
    kelvin2mev = 0.0862
    beta = 1./(temperature*kelvin2mev)
    dE = E[1]-E[0]
    g0 = gamma0(E, Z, beta, dE)
    from mcni.utils import conversion as C
    r = g0 * C.k2e(1) / mass
    # calling DWExp directly. they should give the same results
    r2 = DWExp(np.array([1]), mass, E, Z, beta, dE)[0]
    assert abs(r2-r)/r < .02
    return r


def compute2a(dos, mass, temperature, nsampling):
    from mccomponents.sample.phonon.multiphonon import gamma0, DWExp
    E = dos.energy
    Z = dos.I
    Emax = E[-1]
    E1 = np.arange(0, Emax+Emax/(nsampling-1e-5), Emax/(nsampling-1))
    Z1 = np.interp(E1, E, Z)
    E,Z = E1,Z1
    Z /= Z.sum() * (E[1]-E[0])
    kelvin2mev = 0.0862
    beta = 1./(temperature*kelvin2mev)
    dE = E[1]-E[0]
    g0 = gamma0(E, Z, beta, dE)
    from mcni.utils import conversion as C
    r = g0 * C.k2e(1) / mass
    import numpy
    r2 = DWExp(numpy.array([1]), mass, E, Z, beta, dE)[0]
    assert abs(r2-r)/r < .02
    return r


help_msg = """%(cmd)s

%(cmd)s -m=<mass>  -T=<temperature>  -dos=<dosfile>

""" % {
    'cmd': 'mcvine-debye-waller-core-from-phonon-dos'
    }

from pyre.applications.Script import Script as AppBase
class App(AppBase):

    class Inventory(AppBase.Inventory):

        import pyre.inventory
        mass = pyre.inventory.float('m', default=51)
        temperature = pyre.inventory.float('T', default=300)
        nsampling = pyre.inventory.int('nsampling', default=100)
        dos = pyre.inventory.str('dos', default='V-dos.dat')
        dos_xaxis = pyre.inventory.str('dos-x', default='TeraHz')

    def help(self):
        print(help_msg)

    def main(self):
        mass = self.inventory.mass
        temperature = self.inventory.temperature
        nsampling = self.inventory.nsampling
        dos = loadDOS(self.inventory.dos, xaxis = self.inventory.dos_xaxis)
        # fit low E region to parabolic
        from mccomponents.sample.phonon.utils import nice_dos
        E = dos.energy; g = dos.I
        E, g = nice_dos(E, g)
        # create new dos hist
        dos = histogram.histogram(
            'dos', 
            [('energy', E, 'meV')],
            g)
        # save DOS as a "histogram"
        dos_out = 'dos-hist.h5'
        print("saving dos to a histogram h5 file: %s" % dos_out)
        import histogram.hdf as hh
        hh.dump(dos, dos_out)
        #
        core = compute(dos, mass, temperature, nsampling)
        core2 = compute2(dos, mass, temperature)
        core2a = compute2a(dos, mass, temperature, nsampling)
        print("Debye-Waller factor core (unit: angstrom**2):")
        assert abs(core2-core)/core2 < 0.02
        assert abs(core2a-core)/core2 < 0.02
        core = (core+core2+core2a)/3
        print(core)
        return


def main():
    app = App('mcvine-debye-waller-core-from-phonon-dos')
    app.run()
    return


if __name__ == '__main__': main()

