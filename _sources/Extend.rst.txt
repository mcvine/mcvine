.. _extend-mcvine:

Extend MCViNE
=============

Create a  neutron component
---------------------------

To create a neutron component, you will need to

* subclass mcni.pyre_support.AbstractComponent.AbstractComponent
* implement method "process"

Here is an example::
  
  from mcni.pyre_support.AbstractComponent import AbstractComponent
  class NeutronPrinter( AbstractComponent ):
  
    def process(self, neutrons):
        for n in neutrons: print n

  def neutroncomponent(): return NeutronPrinter('printer')

This component simply prints out all the neutrons.
You can save it as file "printer.odb", and it is ready for use.

Let us create a little example application and use this new component::

 $ mcvine-create-instrument-simulation-application --name=sd --components=source,detector
 $ ./sd --source=Souce_simple --detector=printer --dump-pml
 $ ./sd --ncount=5

The last command will prints out 5 neutrons generated by Source_simple.


Working with neutrons as numpy arrays
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In the "process" method, you could use numpy tools to manipuldate 
the neutron data. This would be a very good way to prototype your neutron
component since numpy is quite fast.

Here is how to transform neutrons to a numpy array::

  >>> from mcni.neutron_storage import neutrons_as_npyarr, ndblsperneutron
  >>> arr = neutrons_as_npyarr(neutrons)
  >>> arr.shape = -1, ndblsperneutron

The reference "arr" now can be manipulated using numpy utilities.

An example can be found at 
`here <http://danse.us/trac/MCViNE/browser/trunk/packages/mcni/mcni/components/NDMonitor.py>`_
